package com.example.springbootrestfulservices.Entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(nullable = false)
    private String firstName;
    @Column(nullable = false)
    private String lastName;
    @Column(nullable = false, unique = true)
    private String email;

    // Getter and setter methods for firstName
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    // Getter and setter methods for lastName
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    // Getter and setter methods for email
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    // Getter and setter methods for id (if needed)
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }
}

/* CODE EXPLANATION
An Entity is a plain old Java object (POJO) that represents the data you want to store. You will need to annotate the class with @Entity and define the fields of the class along with the getters and setters for each field.

- package com.example.springbootrestfulservices;: This line specifies the package name where the class resides.
- import jakarta.persistence.*;: This imports annotations from the Jakarta Persistence API, which is used for Object-Relational Mapping (ORM) in Java EE applications.
- import lombok.AllArgsConstructor;: This imports the AllArgsConstructor annotation from Lombok, which automatically generates a constructor with all arguments.
- import lombok.Getter;: This imports the Getter annotation from Lombok, which automatically generates getter methods for all fields.
- import lombok.NoArgsConstructor;: This imports the NoArgsConstructor annotation from Lombok, which automatically generates a no-arguments constructor.
- import lombok.Setter;: This imports the Setter annotation from Lombok, which automatically generates setter methods for all fields.
- @Getter, @Setter, @NoArgsConstructor, @AllArgsConstructor: These annotations are from Lombok and are used to generate getters, setters, and constructors for the class automatically.
- @Entity: This annotation marks the class as a JPA entity, indicating that it will be mapped to a database table.
- @Table(name = "users"): This annotation specifies the name of the database table to which the entity is mapped. In this case, it's mapped to a table named "users".
- public class User { ... }: This defines the User class.
- @Id: This annotation marks the field id as the primary key of the entity.
- @GeneratedValue(strategy = GenerationType.IDENTITY): This annotation specifies that the primary key values will be automatically generated by the database. The strategy IDENTITY indicates that the database will manage the generation of primary key values.
- private Long id;: This field represents the primary key of the entity.
- @Column(nullable = false): This annotation specifies that the corresponding database column cannot contain null values.
- private String firstName;, private String lastName;, private String email;: These fields represent the attributes of a user entity - first name, last name, and email address. Each field is mapped to a database column.
*/
